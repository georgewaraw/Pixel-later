THREE.STLLoader=function(manager){this.manager=void 0!==manager?manager:THREE.DefaultLoadingManager},THREE.STLLoader.prototype={constructor:THREE.STLLoader,load:function(url,onLoad,onProgress,onError){var scope=this,loader=new THREE.FileLoader(scope.manager);loader.setPath(scope.path),loader.setResponseType("arraybuffer"),loader.load(url,function(text){try{onLoad(scope.parse(text))}catch(exception){onError&&onError(exception)}},onProgress,onError)},setPath:function(value){return this.path=value,this},parse:function(data){function isBinary(data){var expect,face_size,n_faces,reader;if((expect=84+(face_size=50)*(n_faces=(reader=new DataView(data)).getUint32(80,!0)))===reader.byteLength)return!0;for(var solid=[115,111,108,105,100],off=0;off<5;off++)if(matchDataViewAt(solid,reader,off))return!1;return!0}function matchDataViewAt(query,reader,offset){for(var i=0,il=query.length;i<il;i++)if(query[i]!==reader.getUint8(offset+i,!1))return!1;return!0}function parseBinary(data){for(var reader=new DataView(data),faces=reader.getUint32(80,!0),r,g,b,hasColors=!1,colors,defaultR,defaultG,defaultB,alpha,index=0;index<70;index++)1129270351==reader.getUint32(index,!1)&&82==reader.getUint8(index+4)&&61==reader.getUint8(index+5)&&(hasColors=!0,colors=[],defaultR=reader.getUint8(index+6)/255,defaultG=reader.getUint8(index+7)/255,defaultB=reader.getUint8(index+8)/255,alpha=reader.getUint8(index+9)/255);for(var dataOffset=84,faceLength=50,geometry=new THREE.BufferGeometry,vertices=[],normals=[],face=0;face<faces;face++){var start=84+50*face,normalX=reader.getFloat32(start,!0),normalY=reader.getFloat32(start+4,!0),normalZ=reader.getFloat32(start+8,!0);if(hasColors){var packedColor=reader.getUint16(start+48,!0);b=0==(32768&packedColor)?(r=(31&packedColor)/31,g=(packedColor>>5&31)/31,(packedColor>>10&31)/31):(r=defaultR,g=defaultG,defaultB)}for(var i=1;i<=3;i++){var vertexstart=start+12*i;vertices.push(reader.getFloat32(vertexstart,!0)),vertices.push(reader.getFloat32(vertexstart+4,!0)),vertices.push(reader.getFloat32(vertexstart+8,!0)),normals.push(normalX,normalY,normalZ),hasColors&&colors.push(r,g,b)}}return geometry.addAttribute("position",new THREE.BufferAttribute(new Float32Array(vertices),3)),geometry.addAttribute("normal",new THREE.BufferAttribute(new Float32Array(normals),3)),hasColors&&(geometry.addAttribute("color",new THREE.BufferAttribute(new Float32Array(colors),3)),geometry.hasColors=!0,geometry.alpha=alpha),geometry}function parseASCII(data){for(var geometry=new THREE.BufferGeometry,patternFace=/facet([\s\S]*?)endfacet/g,faceCounter=0,patternFloat=/[\s]+([+-]?(?:\d*)(?:\.\d*)?(?:[eE][+-]?\d+)?)/.source,patternVertex=new RegExp("vertex"+patternFloat+patternFloat+patternFloat,"g"),patternNormal=new RegExp("normal"+patternFloat+patternFloat+patternFloat,"g"),vertices=[],normals=[],normal=new THREE.Vector3,result;null!==(result=patternFace.exec(data));){for(var vertexCountPerFace=0,normalCountPerFace=0,text=result[0];null!==(result=patternNormal.exec(text));)normal.x=parseFloat(result[1]),normal.y=parseFloat(result[2]),normal.z=parseFloat(result[3]),normalCountPerFace++;for(;null!==(result=patternVertex.exec(text));)vertices.push(parseFloat(result[1]),parseFloat(result[2]),parseFloat(result[3])),normals.push(normal.x,normal.y,normal.z),vertexCountPerFace++;1!==normalCountPerFace&&console.error("THREE.STLLoader: Something isn't right with the normal of face number "+faceCounter),3!==vertexCountPerFace&&console.error("THREE.STLLoader: Something isn't right with the vertices of face number "+faceCounter),faceCounter++}return geometry.addAttribute("position",new THREE.Float32BufferAttribute(vertices,3)),geometry.addAttribute("normal",new THREE.Float32BufferAttribute(normals,3)),geometry}function ensureString(buffer){return"string"!=typeof buffer?THREE.LoaderUtils.decodeText(new Uint8Array(buffer)):buffer}function ensureBinary(buffer){if("string"!=typeof buffer)return buffer;for(var array_buffer=new Uint8Array(buffer.length),i=0;i<buffer.length;i++)array_buffer[i]=255&buffer.charCodeAt(i);return array_buffer.buffer||array_buffer}var binData=ensureBinary(data);return isBinary(binData)?parseBinary(binData):parseASCII(ensureString(data))}};